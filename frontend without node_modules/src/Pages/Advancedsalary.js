// import React, { useState } from 'react';
// import { Table, Card, Button, Breadcrumb, Form, Modal, Alert } from 'react-bootstrap';
// import { Link } from 'react-router-dom';
// import { useEmployeeDetails } from "../Componets/Employee";

// const AdvancedSalaryPage = () => {
//     const [showModal, setShowModal] = useState(false);
//     const [newRequest, setNewRequest] = useState({ id: '', name: '', department: '', requestedAmount: '', reason: '', date: '', status: 'Pending' });
//     const [alert, setAlert] = useState(null);
//     const [searchTerm, setSearchTerm] = useState('');

//     const handleShowModal = () => setShowModal(true);
//     const handleCloseModal = () => setShowModal(false);

//     const handleInputChange = (e) => {
//         const { name, value } = e.target;
//         setNewRequest({ ...newRequest, [name]: value });
//     };

//     const handleEmployeeChange = (e) => {
//         const selectedEmployeeId = e.target.value;
//         const selectedEmployee = employees.find(emp => emp.id === parseInt(selectedEmployeeId));
//         setNewRequest({ ...newRequest, name: selectedEmployee.name, department: selectedEmployee.department });
//     };

//     const handleSubmit = () => {
//         if (newRequest.name && newRequest.department && newRequest.requestedAmount && newRequest.reason && newRequest.date) {
//             setEmployees([...employees, { ...newRequest, id: employees.length + 1 }]);
//             setAlert({ type: 'success', message: 'Advance salary request submitted successfully!' });
//             setNewRequest({ id: '', name: '', department: '', requestedAmount: '', reason: '', date: '', status: 'Pending' });
//             handleCloseModal();
//         } else {
//             setAlert({ type: 'danger', message: 'Please fill in all fields!' });
//         }
//     };

//     const filteredEmployees = employees.filter((employee) =>
//         employee.name.toLowerCase().includes(searchTerm.toLowerCase())
//     );

//     return (
//         <>
//             <Breadcrumb className="ms-3">
//                 <Breadcrumb.Item linkAs={Link} linkProps={{ to: "/hrm" }}>HRM</Breadcrumb.Item>
//                 <Breadcrumb.Item active>Advanced Salary</Breadcrumb.Item>
//             </Breadcrumb>

//             {alert && (
//                 <Alert variant={alert.type} onClose={() => setAlert(null)} dismissible>
//                     {alert.message}
//                 </Alert>
//             )}

//             <Card className="no-border mx-3">
//                 <Card.Header className="d-flex justify-content-between align-items-center">
//                     <h5 className="mb-0">Advanced Salary Requests</h5>
//                     <div className="d-flex">
//                         <Form.Control
//                             type="text"
//                             placeholder="Search by Employee Name"
//                             value={searchTerm}
//                             onChange={(e) => setSearchTerm(e.target.value)}
//                             className="me-2"
//                         />
//                         <Button variant="primary" onClick={handleShowModal}>Request Advance</Button>
//                     </div>
//                 </Card.Header>

//                 <Card.Body>
//                     <Table striped bordered hover size="sm" className="text-center">
//                         <thead>
//                             <tr>
//                                 <th>ID</th>
//                                 <th>Name</th>
//                                 <th>Department</th>
//                                 <th>Requested Amount</th>
//                                 <th>Reason</th>
//                                 <th>Date</th>
//                                 <th>Status</th>
//                             </tr>
//                         </thead>
//                         <tbody>
//                             {filteredEmployees.map((employee) => (
//                                 <tr key={employee.id}>
//                                     <td>{employee.id}</td>
//                                     <td>{employee.name}</td>
//                                     <td>{employee.department}</td>
//                                     <td>{employee.requestedAmount}</td>
//                                     <td>{employee.reason}</td>
//                                     <td>{employee.date}</td>
//                                     <td>{employee.status}</td>
//                                 </tr>
//                             ))}
//                         </tbody>
//                     </Table>
//                 </Card.Body>
//             </Card>

//             <Modal show={showModal} onHide={handleCloseModal}>
//                 <Modal.Header closeButton>
//                     <Modal.Title>Request Advance Salary</Modal.Title>
//                 </Modal.Header>
//                 <Modal.Body>
//                     <Form>
//                         <Form.Group className="mb-3">
//                             <Form.Label>Employee Name</Form.Label>
//                             <Form.Control
//                                 as="select"
//                                 name="name"
//                                 value={newRequest.id}
//                                 onChange={handleEmployeeChange}
//                             >
//                                 <option value="">Select Employee</option>
//                                 {employees.map(employee => (
//                                     <option key={employee.id} value={employee.id}>
//                                         {employee.name}
//                                     </option>
//                                 ))}
//                             </Form.Control>
//                         </Form.Group>
//                         <Form.Group className="mb-3">
//                             <Form.Label>Department</Form.Label>
//                             <Form.Control
//                                 type="text"
//                                 name="department"
//                                 value={newRequest.department}
//                                 onChange={handleInputChange}
//                                 placeholder="Enter department"
//                                 disabled
//                             />
//                         </Form.Group>
//                         <Form.Group className="mb-3">
//                             <Form.Label>Requested Amount</Form.Label>
//                             <Form.Control
//                                 type="number"
//                                 name="requestedAmount"
//                                 value={newRequest.requestedAmount}
//                                 onChange={handleInputChange}
//                                 placeholder="Enter amount"
//                             />
//                         </Form.Group>
//                         <Form.Group className="mb-3">
//                             <Form.Label>Reason</Form.Label>
//                             <Form.Control
//                                 type="text"
//                                 name="reason"
//                                 value={newRequest.reason}
//                                 onChange={handleInputChange}
//                                 placeholder="Enter reason"
//                             />
//                         </Form.Group>
//                         <Form.Group className="mb-3">
//                             <Form.Label>Date</Form.Label>
//                             <Form.Control
//                                 type="date"
//                                 name="date"
//                                 value={newRequest.date}
//                                 onChange={handleInputChange}
//                             />
//                         </Form.Group>
//                     </Form>
//                 </Modal.Body>
//                 <Modal.Footer>
//                     <Button variant="secondary" onClick={handleCloseModal}>Close</Button>
//                     <Button variant="primary" onClick={handleSubmit}>Submit</Button>
//                 </Modal.Footer>
//             </Modal>
//         </>
//     );
// };

// export default AdvancedSalaryPage;

import React, { useState } from "react";
import {
  Table,
  Card,
  Button,
  Breadcrumb,
  Form,
  Modal,
  Alert,
  Dropdown,
  DropdownButton,
} from "react-bootstrap";
import { Link } from "react-router-dom";
import { useEmployeeDetails } from "../Componets/Employee";

const AdvancedSalaryPage = () => {
  const { employees } = useEmployeeDetails();
  const [showModal, setShowModal] = useState(false);
  const [newRequest, setNewRequest] = useState({
    id: "",
    profile: "",
    department: "",
    requestedAmount: "",
    reason: "",
    date: "",
    status: "Pending",
  });
  const [alert, setAlert] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [salaryRequests, setSalaryRequests] = useState([]); // New state for salary requests

  const handleShowModal = () => setShowModal(true);
  const handleCloseModal = () => setShowModal(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewRequest({ ...newRequest, [name]: value });
  };

  const handleEmployeeChange = (e) => {
    const selectedEmployeeId = e.target.value;
    const selectedEmployee = employees.find(
      (emp) => emp.id === selectedEmployeeId
    );
    setNewRequest({
      ...newRequest,
      id: selectedEmployee.id,
      profile: selectedEmployee.profile, // Make sure this is 'profile' not 'name'
      department: selectedEmployee.department,
    });
  };

  const handleSubmit = () => {
    if (
      newRequest.id &&
      newRequest.profile &&
      newRequest.department &&
      newRequest.requestedAmount &&
      newRequest.reason &&
      newRequest.date &&
      newRequest.status
    ) {
      if (newRequest.requestId) {
        // Update the existing request
        const updatedRequests = salaryRequests.map((request) =>
          request.requestId === newRequest.requestId
            ? { ...newRequest }
            : request
        );
        setSalaryRequests(updatedRequests);
      } else {
        // Create a new request
        setSalaryRequests([
          ...salaryRequests,
          { ...newRequest, requestId: salaryRequests.length + 1 }, // Add a unique request ID
        ]);
      }

      setAlert({
        type: "success",
        message: newRequest.requestId
          ? "Advance salary request updated successfully!"
          : "Advance salary request submitted successfully!",
      });
      setNewRequest({
        id: "",
        profile: "",
        department: "",
        requestedAmount: "",
        reason: "",
        date: "",
        status: "Pending",
      });
      handleCloseModal();
    } else {
      setAlert({ type: "danger", message: "Please fill in all fields!" });
    }
  };

  const filteredEmployees = employees.filter(
    (employee) =>
      employee.profile &&
      employee.profile.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleDelete = (id) => {
    const updatedRequests = salaryRequests.filter(
      (request) => request.requestId !== id
    );
    setSalaryRequests(updatedRequests);
  };

  const handleEdit = (id) => {
    const requestToEdit = salaryRequests.find((request) => request.requestId === id);
    setNewRequest(requestToEdit);
    handleShowModal();
  };

  return (
    <>
      <Breadcrumb className="ms-3">
        <Breadcrumb.Item linkAs={Link} linkProps={{ to: "/hrm" }}>
          HRM
        </Breadcrumb.Item>
        <Breadcrumb.Item active>Advanced Salary</Breadcrumb.Item>
      </Breadcrumb>

      {alert && (
        <Alert variant={alert.type} onClose={() => setAlert(null)} dismissible>
          {alert.message}
        </Alert>
      )}

      <Card className="no-border mx-3">
        <Card.Header className="d-flex justify-content-between align-items-center">
          <h5 className="mb-0">Advanced Salary Requests</h5>
          <div className="d-flex">
            <Form.Control
              type="text"
              placeholder="Search by Employee Name"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="me-2"
            />
            <Button variant="primary" onClick={handleShowModal}>
              Request Advance
            </Button>
          </div>
        </Card.Header>

        <Card.Body>
          <Table striped bordered hover size="sm" className="text-center">
            <thead>
              <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Department</th>
                <th>Requested Amount</th>
                <th>Reason</th>
                <th>Date</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {salaryRequests.map((request) => (
                <tr key={request.requestId}>
                  <td>{request.id}</td>
                  <td>{request.profile}</td>
                  <td>{request.department}</td>
                  <td>{request.requestedAmount}</td>
                  <td>{request.reason}</td>
                  <td>{request.date}</td>
                  <td>{request.status}</td>
                  <td>
                    <DropdownButton
                      id={`dropdown-actions-${request.requestId}`}
                      variant="secondary"
                    >
                      <Dropdown.Item onClick={() => handleEdit(request.requestId)}>
                        Edit
                      </Dropdown.Item>
                      <Dropdown.Item onClick={() => handleDelete(request.requestId)}>
                        Delete
                      </Dropdown.Item>
                    </DropdownButton>
                  </td>
                </tr>
              ))}
            </tbody>
          </Table>
        </Card.Body>
      </Card>

      <Modal show={showModal} onHide={handleCloseModal}>
        <Modal.Header closeButton>
          <Modal.Title>Request Advance Salary</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>ID</Form.Label>
              <Form.Control
                as="select"
                name="id"
                value={newRequest.id}
                onChange={handleEmployeeChange}
              >
                <option value="">Select Employee</option>
                {employees.map((employee) => (
                  <option key={employee.id} value={employee.id}>
                    {employee.id}
                  </option>
                ))}
              </Form.Control>
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Employee Name</Form.Label>
              <Form.Control
                type="text"
                name="name"
                value={newRequest.profile} // Bind the input value to newRequest.profile
                onChange={handleInputChange}
                placeholder="Employee Name"
                disabled
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Department</Form.Label>
              <Form.Control
                type="text"
                name="department"
                value={newRequest.department}
                onChange={handleInputChange}
                placeholder="Enter department"
                disabled
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Requested Amount</Form.Label>
              <Form.Control
                type="number"
                name="requestedAmount"
                value={newRequest.requestedAmount}
                onChange={handleInputChange}
                placeholder="Enter amount"
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Reason</Form.Label>
              <Form.Control
                type="text"
                name="reason"
                value={newRequest.reason}
                onChange={handleInputChange}
                placeholder="Enter reason"
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Date</Form.Label>
              <Form.Control
                type="date"
                name="date"
                value={newRequest.date}
                onChange={handleInputChange}
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>Status</Form.Label>
              <Form.Control
                as="select"
                name="status"
                value={newRequest.status}
                onChange={handleInputChange}
              >
                <option value="Pending">Pending</option>
                <option value="Approved">Approved</option>
                <option value="Rejected">Rejected</option>
              </Form.Control>
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={handleCloseModal}>
            Close
          </Button>
          <Button variant="primary" onClick={handleSubmit}>
            Submit
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default AdvancedSalaryPage;
