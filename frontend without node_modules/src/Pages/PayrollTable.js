// import React from 'react';

// const PayrollTable = ({ payrollRecords }) => {
//   return (
//     <table>
//       <thead>
//         <tr>
//           <th>Year</th>
//           <th>Month</th>
//           <th>Staff ID</th>
//           <th>Employee Name</th>
//           <th>Bank Name</th>
//           <th>Account Number</th>
//           <th>Account Name</th>
//           <th>Monthly Earnings</th>
//           <th>Total Deductions</th>
//           <th>Net Salary</th>
//         </tr>
//       </thead>
//       <tbody>
//         {payrollRecords.map((record) => (
//           <tr key={record._id}>
//             <td>{record.year}</td>
//             <td>{record.month}</td>
//             <td>{record.staffID}</td>
//             <td>{record.employeeName}</td>
//             <td>{record.bankName}</td>
//             <td>{record.accountNumber}</td>
//             <td>{record.accountName}</td>
//             <td>{record.monthlyEarnings}</td>
//             <td>{record.totalDeductions}</td>
//             <td>{record.netSalary}</td>
//           </tr>
//         ))}
//       </tbody>
//     </table>
//   );
// };

// export default PayrollTable;


// // Pages/PayrollTable.js
// import React, { useState } from 'react';
// import { Card, Form, Button } from 'react-bootstrap';

// const PayrollTable = ({ payrollRecords }) => {
//   const [filters, setFilters] = useState({
//     year: '',
//     month: '',
//     staffID: '',
//   });

//   const handleFilterChange = (e) => {
//     const { name, value } = e.target;
//     setFilters((prevFilters) => ({
//       ...prevFilters,
//       [name]: value,
//     }));
//   };

//   const filteredRecords = payrollRecords.filter((record) => {
//     const yearMatch = filters.year ? record.year.toString() === filters.year : true;
//     const monthMatch = filters.month ? record.month === filters.month : true;
//     const staffIDMatch = filters.staffID
//       ? record.staffID.toString().includes(filters.staffID)
//       : true;
//     return yearMatch && monthMatch && staffIDMatch;
//   });

//   return (
//     <div>
//       {/* Filter Section */}
//       <Card.Header className="d-flex justify-content-between align-items-center mb-2">
//         <h5 className="mb-0">Payroll Records</h5>

//         <div className="d-flex align-items-center">
//           <Form className="d-flex me-2" style={{ width: '500px' }}>
//             {/* Year Filter */}
//             <Form.Select
//               name="year"
//               value={filters.year}
//               onChange={handleFilterChange}
//               className="me-2"
//               size="sm"
//             >
//               <option value="">Select Year</option>
//               {[2023, 2024, 2025].map((year) => (
//                 <option key={year} value={year}>
//                   {year}
//                 </option>
//               ))}
//             </Form.Select>

//             {/* Month Filter */}
//             <Form.Select
//               name="month"
//               value={filters.month}
//               onChange={handleFilterChange}
//               className="me-2"
//               size="sm"
//             >
//               <option value="">Select Month</option>
//               {[
//                 'January',
//                 'February',
//                 'March',
//                 'April',
//                 'May',
//                 'June',
//                 'July',
//                 'August',
//                 'September',
//                 'October',
//                 'November',
//                 'December',
//               ].map((month, index) => (
//                 <option key={index} value={month}>
//                   {month}
//                 </option>
//               ))}
//             </Form.Select>

//             {/* Staff ID Filter */}
//             <Form.Control
//               type="text"
//               name="staffID"
//               value={filters.staffID}
//               onChange={handleFilterChange}
//               placeholder="Staff ID"
//               className="me-2"
//               size="sm"
//             />
//           </Form>

//           <Button
//             variant="outline-primary"
//             className="d-flex align-items-center"
//             onClick={() => setFilters({ year: '', month: '', staffID: '' })}
//           >
//             <i className="bi bi-filter me-1"></i>
//             Clear Filters
//           </Button>
//         </div>
//       </Card.Header>

//       {/* Table */}
//       <div className="table-responsive">
//         <table className="table table-bordered table-striped">
//           <thead className="thead-dark">
//             <tr>
//               <th>Year</th>
//               <th>Month</th>
//               <th>Staff ID</th>
//               <th>Employee Name</th>
//               <th>Bank Name</th>
//               <th>Account Number</th>
//               <th>Account Name</th>
//               <th>Monthly Earnings</th>
//               <th>Total Deductions</th>
//               <th>Net Salary</th>
//             </tr>
//           </thead>
//           <tbody>
//             {filteredRecords && filteredRecords.length > 0 ? (
//               filteredRecords.map((record) => (
//                 <tr key={record._id}>
//                   <td>{record.year}</td>
//                   <td>{record.month}</td>
//                   <td>{record.staffID}</td>
//                   <td>{record.employeeName}</td>
//                   <td>{record.bankName}</td>
//                   <td>{record.accountNumber}</td>
//                   <td>{record.accountName}</td>
//                   <td>{record.monthlyEarnings.toFixed(2)}</td>
//                   <td>{record.totalDeductions.toFixed(2)}</td>
//                   <td>{record.netSalary.toFixed(2)}</td>
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td colSpan="10" className="text-center">
//                   No payroll records available.
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>
//     </div>
//   );
// };

// export default PayrollTable;


// Pages/PayrollTable.js
import React, { useState } from 'react';
import { Card, Form, Button } from 'react-bootstrap';

const PayrollTable = ({ payrollRecords }) => {
  const [filters, setFilters] = useState({
    year: '',
    month: '',
    staffID: '',
  });

  const handleFilterChange = (e) => {
    const { name, value } = e.target;
    setFilters((prevFilters) => ({
      ...prevFilters,
      [name]: value,
    }));
  };

  

  // Get unique staff IDs from the payroll records
  const staffIDs = [...new Set(payrollRecords.map((record) => record.staffID))];

  const filteredRecords = payrollRecords.filter((record) => {
    const yearMatch = filters.year ? record.year.toString() === filters.year : true;
    const monthMatch = filters.month ? record.month === filters.month : true;
    const staffIDMatch = filters.staffID
      ? record.staffID.toString().includes(filters.staffID)
      : true;
    return yearMatch && monthMatch && staffIDMatch;
  });

  return (
    <div>
      {/* Filter Section */}
      <Card.Header className="d-flex justify-content-between align-items-center mb-2 mx-4">
        <h5 className="mb-0">Payroll Records</h5>

        <div className="d-flex align-items-center">
          <Form className="d-flex me-2" style={{ width: '500px' }}>
            {/* Year Filter */}
            <Form.Select
              name="year"
              value={filters.year}
              onChange={handleFilterChange}
              className="me-2"
              size="sm"
            >
              <option value="">Select Year</option>
              {[2022,2023, 2024, 2025,2026].map((year) => (
                <option key={year} value={year}>
                  {year}
                </option>
              ))}
            </Form.Select>

            {/* Month Filter */}
            <Form.Select
              name="month"
              value={filters.month}
              onChange={handleFilterChange}
              className="me-2"
              size="sm"
            >
              <option value="">Select Month</option>
              {[
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December',
              ].map((month, index) => (
                <option key={index} value={month}>
                  {month}
                </option>
              ))}
            </Form.Select>

            {/* Staff ID Filter */}
            <Form.Select
              name="staffID"
              value={filters.staffID}
              onChange={handleFilterChange}
              className="me-2"
              size="sm"
            >
              <option value="">Select Staff ID</option>
              {staffIDs.map((staffID) => (
                <option key={staffID} value={staffID}>
                  {staffID}
                </option>
              ))}
            </Form.Select>
          </Form>

          <Button
            variant="outline-primary"
            className="d-flex align-items-center"
            onClick={() => setFilters({ year: '', month: '', staffID: '' })}
          >
            <i className="bi bi-filter me-1"></i>
            Clear Filters
          </Button>
        </div>
      </Card.Header>

      {/* Table */}
      <div className="table-responsive">
        <table className="table table-bordered table-striped">
          <thead className="thead-dark">
            <tr>
              <th>Year</th>
              <th>Month</th>
              <th>Staff ID</th>
              <th>Employee Name</th>
              <th>Bank Name</th>
              <th>Account Number</th>
              <th>Account Name</th>
              <th>Monthly Earnings</th>
              <th>Total Deductions</th>
              <th>Net Salary</th>
              <th>Status<br/>Paid or Not</th>
            </tr>
          </thead>
          <tbody>
            {filteredRecords && filteredRecords.length > 0 ? (
              filteredRecords.map((record) => (
                <tr key={record._id}>
                  <td>{record.year}</td>
                  <td>{record.month}</td>
                  <td>{record.staffID}</td>
                  <td>{record.employeeName}</td>
                  <td>{record.bankName}</td>
                  <td>{record.accountNumber}</td>
                  <td>{record.accountName}</td>
                  <td>{record.monthlyEarnings.toFixed(2)}</td>
                  <td>{record.totalDeductions.toFixed(2)}</td>
                  <td>{record.netSalary.toFixed(2)}</td>
                  <td className="text-center">
                  <input
                    type="checkbox"
                    // checked={record.isChecked || false}
                    // onChange={() => handleStatusChange(index)}
                  />
                </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="10" className="text-center">
                  No payroll records available.
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default PayrollTable;
